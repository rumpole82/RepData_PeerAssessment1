?separate()
?separate
separate(res, col= sex_class, into=c("sex", "class"))
submit()
students3
submit()
?spread
submit()
submit()
submit
submit()
siubmit()
submit()
submit()
submit()
submit()
submit()
reset()
submit()
submit()
submit()
submit()
extract_numeric("class5")
?mutate
submit()
submit()
submit()
submit()
submit()
bye()
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help()
info()
help(package = lubridate)
this_day <- today()
bye()
swirl()
reset()
submit()
students4
submit()
submit()
submit()
submit()
passed
failed
?mutate
passed <- mutate(passed, passed="passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
?rbind_list
rbind_list(passed,failed)
sat
sat$write_fem
?select
?separate
example.separate
examples.separate
example(separate)
submit()
submit()
submit()
submit()
reset()
submit()
this_day
year(this_day)
wday(this_day)
wday(this_day, label=T)
wday(this_day, label=TRUE)
this_moment <- now()
this_moment
second(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("19-20-12")
ymd("1-9-2012")
mdy("1-9-2012")
ymd("1920/1/2")
dt1
ymd_hms("2014-08-23 17:23:02")
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
now()
this_moment <- update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
?now
nyc <- now(tzone="America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours=17, minutes=34)
depart
arrive <- nyc + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tz="Asia/Hong_Kong")
arrive
mdy("June 17, 2008", tz = "Singapore" )
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
mspi <- aggregate(steps ~ interval, data, mean)
plot(mspi$interval, mspi$steps, type="l")
mspi[which(mspi$mean == max(mspi$mean)),]
head(mpsi$mean)
head(mspi$mean)
class(mspi$mean)
which(mspi$mean == max(mspi$mean))
max(mspi$mean)
head(mspi)
max(mspi)
mspi[2355,]
range(mspi)
mspi
max(mspi$steps)
mspi[which(mspi$mean == max(mspi$steps)),]
which(mspi$interval == max(mspi$steps))
which(mspi$steps == max(mspi$steps))
mspi[which(mspi$interval == max(mspi$steps)),]
mspi[104,]
mspi[which(mspi$steps == max(mspi$steps)),]
means <- aggregate(steps ~ date, data, mean)
length(means)
head(means)
?mutate
head(data)
amy <- merge(data, means, by=date)
amy <- merge(data, means, by.x=date, by.y=date)
?merge
amy <- merge(data, means, by.x="date", by.y="date")
head(amy)
length(amy)
str(amy)
head(amy, 150)
a <- arrange(amy, date, interval)
head(a)
head(a, 150)
a[8000,]
str(data)
str(means)
str(amy)
number_missing
amy <- merge(data, means, by.x="date")
amy <- merge(data, means)
str(amy)
head(amy)
amy <- merge(data, means, by=intersect(names(x)))
head(data)
head(means)
amy<-data
head(amy)
a <-amy$steps[is.na(amy$steps)]
a
head(means)
head(data)
rows_with_missing_values <- data[which(is.na(data$date)),]
rows_with_missing_values
rows_with_missing_values <- data[which(is.na(data$steps)),]
rows_with_missing_values
amy <- merge(data, means, by.x="date", by.y="date")
str(amy)
amy <- merge(data, means, by="date")
str(amy)
amy <- group_by(data, date)
head(amy)
str(amy)
by_date <- group_by(data, date)
head(by_date)
date_means <- summarize(by_date, mean = mean(steps))
str(date_means)
head(date_means)
head(means)
str(means)
data$date[2012-10-01]
data$date["2012-10-01""]
,
data$date["2012-10-01"]
data$date["2012-10-02"]
data$date("2012-10-02")
data$date("2012-10-02",)
data[data$date="2012-10-05",]
data[data$date=2012-10-05,]
data[data$date=="2012-10-05",]
data[data$date=="2012-10-01",]
rows_with_missing_values <- data[which(is.na(data$date)),]
length(rows_with_missing_values$steps)
length(rows_with_missing_values$date)
rows_with_missing_values <- data[which(is.na(data$steps)),]
number_missing <- length(rows_with_missing_values$steps)
number_missing
head(rows_with_missing_values)
means <- aggregate(steps ~ interval, data, mean)
head(means)
head(data)
amy <- merge(data, means, by.x=steps, by.y=steps)
amy <- merge(data, means, by.x=interval, by.y=interval)
amy <- merge(data, means, by.x="interval", by.y="interval")
str(amy)
head(amy)
amy <- arrange(amy, date)
head(amy)
amy[8000,]
amy[9000,]
?subset
amy[1,]
amy$steps.x[1,]
chris <- amy$steps.x
head(chris)
amy$steps.x[is.na(amy$steps.x)]
amy$steps.x[is.na(amy$steps.x)] <- amy$steps.y[is.na(amy$steps.x)]
head(amy)
amy[8000,]
amy$steps.x[5000]
amy <- arrange(amy, date)
merged <- merge(data, means, by.x="interval", by.y="interval")
merged <- arrange(merged, data)
merged <- arrange(merged, date)
merged$steps.x[is.na(merged$steps.x)] <- merged$steps.y[is.na(merged$steps.x)]
merged[8000,]
new_data <- select(interval, steps.x, date)
?select
new_data <- select(merged, interval, steps.x, date)
head(new_data)
rename(new_data, steps.x=steps)
rename(new_data, steps.x="steps")
names(new_data) <- c("interval", "steps", "date")
head(new_data)
new_sums <- aggregate(steps ~ date, new_data, sum)
hist(new_sums$steps, xlab="steps per day", main="histogram of total number of steps per day")
mean(new_sums$steps)
median(new_sums$steps)
mean(sums$steps)
median(sums$steps)
str(means)
merged <- merge(data, means, by.x="interval", by.y="interval")
str(merged)
amy <- arrange(merged, interval)
head(amy)
head(new_data)
wday("2012-10-01")
wday <- mutate(new_data, day=wday(new_data$date))
head(wday)
?wday
now
now()
wday(now())
wday$day[7] <- wday$day[weekend]
wday$day[7]
if (wday$day == 7 | wday$day == 1) wday$day == weekend
length(new_data)
nrow(new_data)
for i=nrow(new_data) {
if(wday$day[i] == 7 | wday$day[i] == 1) wday$day <- weekend
else wday$day <- weekday
}
for i=nrow(new_data) {
if(wday$day[i] == 7 | wday$day[i] == 1) wday$day <- weekend
else(wday$day <- weekday)
}
for i=nrow(new_data) {
if(wday$day[i] == 7 | wday$day[i] == 1)
wday$day <- weekend
else wday$day <- weekday
}
for i=nrow(new_data) {
if(wday$day[i] == 7 | wday$day[i] == 1) {
wday$day <- weekend
}
else {
wday$day <- weekday
}
}
for n in nrow(new_data) {
if(wday$day[n] == 7 | wday$day[n] == 1) {
wday$day <- weekend
}
else {
wday$day[n] <- weekday
}
}
for (n in nrow(new_data)) {
if(wday$day[n] == 7 | wday$day[n] == 1) {
wday$day <- weekend
}
else {
wday$day[n] <- weekday
}
}
for (n in nrow(new_data)) {
if(wday$day[n] == 7 | wday$day[n] == 1) {
wday$day <- "weekend""
}
else {
wday$day[n] <- "weekday""
}
}
for (n in 1:nrow(new_data)) {
if(wday$day[n] == 7 | wday$day[n] == 1) {
wday$day <- "weekend""
}
else {
wday$day[n] <- "weekday""
}
}
for (n in 1:nrow(new_data)) {
if(wday$day[n] == 7 | wday$day[n] == 1) {
wday$day[n] <- "weekend"
}
else {
wday$day[n] <- "weekday"
}
}
head(new_data)
head(wday)
wday <- mutate(new_data, day=wday(new_data$date))
for (n in 1:nrow(new_data)) {
if(wday$day[n] == 7 | wday$day[n] == 1) {
wday$day[n] <- "weekend"
}
else {
wday$day[n] <- "weekday"
}
}
head(wday)
unique(wday$interval)
install.packages(lattice)
install.packages("lattice")
library(lattice)
head(wday)
a <- aggregate(steps~interval~day, wday, mean)
by_day <- group_by(wday, day)
head(by_day)
str(by_day)
# Read the code below, but don't change anything. As
# you read it, you can pronounce the %>% operator as
# the word 'then'.
#
# Type submit() when you think you understand
# everything here.
result3 <-
cran %>%
group_by(package) %>%
summarize(count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size)
) %>%
filter(countries > 60) %>%
arrange(desc(countries), avg_bytes)
# Print result to console
print(result3)
means_by_day <- aggregate(steps ~ interval, by_day, mean)
head(means_by_day)
tail(means_by_day)
head(by_day)
head(wday)
str(wday)
str(by_day)
?by
b <- by(wday, day, mean)
b <- aggregate(steps ~ interval, by_day, mean)
head(b)
str(b)
head(wday)
for (n in 1:nrow(new_data)) {
if(wday$day[n] == 7 | wday$day[n] == 1) {
wday$day[n] <- "weekend"
}
else {
wday$day[n] <- "weekday"
}
}
head(wday)
?tapply
t <- tapply(wday$steps ~ wday$interval, wday$day, mean)
weekdays <- filter(wday, day==weekday)
weekdays <- filter(wday, day=weekday)
weekdays <- filter(wday, day="weekday")
weekdays <- filter(wday, day=="weekday")
nrow(weekdays)
unique(weekdays$day)
weekdays <- filter(wday, day=weekday)
weekdays <- filter(wday, day="weekday")
?filter
unique(wdays$day)
unique(wday$day)
for (n in 1:nrow(new_data)) {
if(wday$day[n] == 7 | wday$day[n] == 1) {
wday$day[n] <- "weekend"
}
else {
wday$day[n] <- "weekday"
}
}
wdays[8000,]
wday[8000,]
str(by_data)
str(by_days)
str(by_day)
#add a column of interval means to the original data set.
merged <- merge(data, means, by.x="interval", by.y="interval")
#arrange it by date for clarity.
merged <- arrange(merged, date)
#replace NA valued with interval means.
merged$steps.x[is.na(merged$steps.x)] <- merged$steps.y[is.na(merged$steps.x)]
#remove extra column from merged.
new_data <- select(merged, interval, steps.x, date)
#assign original column names to new data set.
names(new_data) <- c("interval", "steps", "date")
new_sums <- aggregate(steps ~ date, new_data, sum)
#make a histogram of the average number of steps taken each day.
hist(new_sums$steps, xlab="steps per day", main="histogram of total number of steps per day")
mean(new_sums$steps)
median(new_sums$steps)
for (n in 1:nrow(new_data)) {
if(wday$day[n] == 7 | wday$day[n] == 1) {
wday$day[n] <- "weekend"
}
else {
wday$day[n] <- "weekday"
}
}
wday <- mutate(new_data, day=wday(new_data$date))
unique(wday$day)
for (n in 1:nrow(new_data)) {
if(wday$day[n] == 7 | wday$day[n] == 1) {
wday$day[n] <- "weekend"
}
else {
wday$day[n] <- "weekday"
}
}
unique(wday$day)
f <- filter(wday, day="weekend")
f <- filter(wday, day=weekend)
f <- subset(wday, wday$day=="weekend")
nrow(f)
g <- subset(wday, wday$day=="weekday")
nrow(g)
fmeans <- aggregate(steps ~ interval, f, mean)
head(fmeans)
gmeans <- aggregate(steps ~ interval, g, mean)
head(gmeans)
fmerged <- merge(f, fmeans, by.x="interval", by.y="interval")
head(fmerged)
gmerged <- merge(g, gmeans, by.x="interval", by.y="interval")
head(gmerged)
endmerged <- merge(fmerged, gmerged, by.x="interval", by.y="interval")
head(endmerged)
head(wday)
nrow(fmerged)
nrow(gmerged)
end <- rbind(fmerged, gmerged)
nrow(end)
head(end)
final <- select(end, interval, date, day, steps.y)
head(final)
names(final) <- c("interval", "date", "day", "avg_steps")
head(final)
end <- select(end, interval, date, day, steps.y)
head(end)
names(end) <- c("interval", "date", "day", "avg_steps")
head(end)
end <- arrange(end, date)
head(end)
nrow(end)
nrow(fmeans)
nrow(gmeans)
end <- rbind(fmeans, gmeans)
nrow(end)
head(end)
fmerged <- merge(f, fmeans, by.x="interval", by.y="interval")
gmerged <- merge(g, gmeans, by.x="interval", by.y="interval")
end <- rbind(fmerged, gmerged)
end <- select(end, interval, date, day, steps.y)
names(end) <- c("interval", "date", "day", "avg_steps")
end <- arrange(end, date)
head(end)
nrow(end)
unique(end$avg_steps)
test <- rbind(fmeans, gmeans)
nrow(test)
head(f)
head(fmeans)
fmeans <- mutate(fmeans, day="weekday")
head(fmeans)
gmeans <- mutate(gmeans, day="weekend")
head(gmeans)
end <- rbind(fmeans, gmeans)
head(end)
xyplot(steps ~ interval | day, data=end, layout=c(2,1))
xyplot(steps ~ interval | day, data=end, type="l", layout=c(1,2))
library(lattice)
unique(fmeans$interval)
?plot
plot(mspi$interval, mspi$steps, type="l", xlab="interval", ylab="steps")
